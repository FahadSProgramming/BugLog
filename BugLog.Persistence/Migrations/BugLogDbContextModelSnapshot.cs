// <auto-generated />
using System;
using BugLog.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BugLog.Persistence.Migrations
{
    [DbContext(typeof(BugLogDbContext))]
    partial class BugLogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("BugLog.Domain.Entities.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("ExpectedEndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ServiceContractId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ServiceContractId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("BugLog.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("MobilePhone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("BugLog.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("TwoDigitISOCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("BugLog.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("BaseCurrency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<Guid>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<double>("ExchangeRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(1.0);

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("BugLog.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BugLog.Domain.Entities.PriceList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PriceLists");
                });

            modelBuilder.Entity("BugLog.Domain.Entities.PriceListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<double>("ItemPrice")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PriceListId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PriceListId");

                    b.HasIndex("ProductId");

                    b.ToTable("PriceListItems");
                });

            modelBuilder.Entity("BugLog.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DefaultPriceListId")
                        .HasColumnType("TEXT");

                    b.Property<double>("ListPrice")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<int?>("ProductType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DefaultPriceListId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BugLog.Domain.Entities.ServiceContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<Guid>("PriceListId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TaxProfileId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PriceListId");

                    b.HasIndex("TaxProfileId");

                    b.ToTable("ServiceContracts");
                });

            modelBuilder.Entity("BugLog.Domain.Entities.ServiceContractLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<double>("Discount")
                        .HasColumnType("REAL");

                    b.Property<int>("DiscountType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<double>("NetPrice")
                        .HasColumnType("REAL");

                    b.Property<Guid>("PriceListId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PriceListItemId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ServiceContractId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TaxProfileId")
                        .HasColumnType("TEXT");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PriceListId");

                    b.HasIndex("PriceListItemId");

                    b.HasIndex("ServiceContractId");

                    b.HasIndex("TaxProfileId");

                    b.ToTable("ServiceContractLines");
                });

            modelBuilder.Entity("BugLog.Domain.Entities.SystemUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(150);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(150);

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<Guid?>("UserManagerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserManagerId");

                    b.ToTable("SystemUsers");
                });

            modelBuilder.Entity("BugLog.Domain.Entities.TaxProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(150);

                    b.Property<int>("TaxProfileType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("TaxProfiles");
                });

            modelBuilder.Entity("BugLog.Domain.Entities.Case", b =>
                {
                    b.HasOne("BugLog.Domain.Entities.Contact", "Contact")
                        .WithMany("Cases")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "CreatedBy")
                        .WithMany("CaseCreateActions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.Customer", "Customer")
                        .WithMany("Cases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "ModifiedBy")
                        .WithMany("CaseUpdateActions")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.ServiceContract", "ServiceContract")
                        .WithMany("Cases")
                        .HasForeignKey("ServiceContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BugLog.Domain.Entities.Contact", b =>
                {
                    b.HasOne("BugLog.Domain.Entities.Country", "Country")
                        .WithMany("Contacts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "CreatedBy")
                        .WithMany("ContactCreateActions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "ModifiedBy")
                        .WithMany("ContactUpdateActions")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("BugLog.Domain.Entities.Country", b =>
                {
                    b.HasOne("BugLog.Domain.Entities.SystemUser", "CreatedBy")
                        .WithMany("CountryCreateActions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "ModifiedBy")
                        .WithMany("CountryUpdateActions")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("BugLog.Domain.Entities.Currency", b =>
                {
                    b.HasOne("BugLog.Domain.Entities.Country", "Country")
                        .WithOne("Currency")
                        .HasForeignKey("BugLog.Domain.Entities.Currency", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "CreatedBy")
                        .WithMany("CurrencyCreateActions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "ModifiedBy")
                        .WithMany("CurrencyUpdateActions")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("BugLog.Domain.Entities.Customer", b =>
                {
                    b.HasOne("BugLog.Domain.Entities.Country", "Country")
                        .WithMany("Customers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "CreatedBy")
                        .WithMany("CustomerCreateActions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "ModifiedBy")
                        .WithMany("CustomerUpdateActions")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("BugLog.Domain.Entities.PriceList", b =>
                {
                    b.HasOne("BugLog.Domain.Entities.SystemUser", "CreatedBy")
                        .WithMany("PriceListCreateActions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.Currency", "Currency")
                        .WithMany("PriceLists")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "ModifiedBy")
                        .WithMany("PriceListUpdateActions")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("BugLog.Domain.Entities.PriceListItem", b =>
                {
                    b.HasOne("BugLog.Domain.Entities.SystemUser", "CreatedBy")
                        .WithMany("PriceListItemCreateActions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "ModifiedBy")
                        .WithMany("PriceListItemUpdateActions")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.PriceList", "PriceList")
                        .WithMany("PriceListItems")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BugLog.Domain.Entities.Product", "Product")
                        .WithMany("PriceListItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BugLog.Domain.Entities.Product", b =>
                {
                    b.HasOne("BugLog.Domain.Entities.SystemUser", "CreatedBy")
                        .WithMany("ProductCreateActions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.PriceList", "DefaultPriceList")
                        .WithMany("Products")
                        .HasForeignKey("DefaultPriceListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "ModifiedBy")
                        .WithMany("ProductUpdateActions")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("BugLog.Domain.Entities.ServiceContract", b =>
                {
                    b.HasOne("BugLog.Domain.Entities.SystemUser", "CreatedBy")
                        .WithMany("ServiceContractCreateActions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.Customer", "Customer")
                        .WithMany("ServiceContracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "ModifiedBy")
                        .WithMany("ServiceContractUpdateActions")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.PriceList", "PriceList")
                        .WithMany("ServiceContracts")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("BugLog.Domain.Entities.TaxProfile", "TaxProfile")
                        .WithMany("ServiceContracts")
                        .HasForeignKey("TaxProfileId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("BugLog.Domain.Entities.ServiceContractLine", b =>
                {
                    b.HasOne("BugLog.Domain.Entities.SystemUser", "CreatedBy")
                        .WithMany("ServiceContractLineCreateActions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "ModifiedBy")
                        .WithMany("ServiceContractLineUpdateActions")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.PriceList", "PriceList")
                        .WithMany("ServiceContractLines")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BugLog.Domain.Entities.PriceListItem", "PriceListItem")
                        .WithMany("ServiceContractLines")
                        .HasForeignKey("PriceListItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BugLog.Domain.Entities.ServiceContract", "ServiceContract")
                        .WithMany("ServiceContractLines")
                        .HasForeignKey("ServiceContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugLog.Domain.Entities.TaxProfile", "TaxProfile")
                        .WithMany("ServiceContractLines")
                        .HasForeignKey("TaxProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BugLog.Domain.Entities.SystemUser", b =>
                {
                    b.HasOne("BugLog.Domain.Entities.SystemUser", "CreatedBy")
                        .WithMany("CreateActions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "ModifiedBy")
                        .WithMany("UpdateActions")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "UserManager")
                        .WithMany("Subordinates")
                        .HasForeignKey("UserManagerId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("BugLog.Domain.Entities.TaxProfile", b =>
                {
                    b.HasOne("BugLog.Domain.Entities.SystemUser", "CreatedBy")
                        .WithMany("TaxProfileCreateActions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BugLog.Domain.Entities.Currency", "Currency")
                        .WithMany("TaxProfiles")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BugLog.Domain.Entities.SystemUser", "ModifiedBy")
                        .WithMany("TaxProfileUpdateActions")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
